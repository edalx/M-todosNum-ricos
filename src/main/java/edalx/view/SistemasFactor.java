/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edalx.view;

import edalx.methods.Choleski;
import edalx.methods.EliminacionGaussiana;
import edalx.methods.Operaciones;
import edalx.methods.SistemasdeEcuaciones;
import edalx.models.defLU;

/**
 *
 * @author Alexander
 */
public class SistemasFactor extends javax.swing.JFrame {

    /**
     * Creates new form SistemasFactor
     */
    public SistemasFactor() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        item = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        dim = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        matA = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        matB = new javax.swing.JTextArea();
        exec = new javax.swing.JButton();
        Limpiar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        resul = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI Light", 1, 22)); // NOI18N
        jLabel1.setText("Sistemas de ecuaciones lineales por factorización");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Ingreso de datos"));

        jLabel2.setText("Seleccione el método:");

        item.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cholesky", "Crout" }));

        jLabel3.setText("Dimension de la matriz A:");

        jLabel7.setText("Si Ax=b, ingrese la matriz de coeficientes A y el vector b");

        matA.setColumns(20);
        matA.setRows(5);
        jScrollPane1.setViewportView(matA);

        matB.setColumns(20);
        matB.setRows(5);
        jScrollPane2.setViewportView(matB);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(item, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dim, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(71, 71, 71))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(item, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dim, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        exec.setText("Calcular");
        exec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                execActionPerformed(evt);
            }
        });

        Limpiar.setText("Limpiar");
        Limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Resultados"));

        resul.setColumns(20);
        resul.setRows(5);
        jScrollPane3.setViewportView(resul);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jButton2.setText("Regresar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(Limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exec, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(130, 130, 130))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62))
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(42, 42, 42)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exec)
                    .addComponent(Limpiar))
                .addGap(27, 27, 27)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void execActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_execActionPerformed
        Choleski method = new Choleski();
        Operaciones cap = new Operaciones();
        defLU result = new defLU();
        int f1 = Integer.parseInt(dim.getText());
        int choose = item.getSelectedIndex();
        //Matriz coeficientes
        String contenidoTexto1 = matA.getText();
        String[] matrizBorrador1 = new String[f1];
        matrizBorrador1 = cap.matrizTokens(contenidoTexto1, f1);//Se asigna los tokens a la matriz
        double[][] matriz1 = new double[f1][f1];
        matriz1 = cap.capturaMatriz(matrizBorrador1, f1, f1);//Se almacena cada numero ingresado en la matriz

        //Vector extendido
        String contenidoTexto2 = matB.getText();
        String[] matrizBorrador2 = new String[f1];
        matrizBorrador2 = cap.matrizTokens(contenidoTexto2, f1);//Se asigna los tokens a la matriz
        double[] matriz2 = new double[f1];
        matriz2 = cap.capturaVector(matrizBorrador2, f1);

        switch (choose) {
            case 0:
                if (method.isSquare(matriz1)) {
                    if (method.isSymmetric(matriz1)) {

                        result = method.FactorizacionCholesky(matriz1, matriz2, f1);
                        if (result != null) {

                            double[] z = method.SustitucionProgresiva(result.getL(), matriz2);
                            resul.append("Matriz L\n");
                            for (int i = 0; i < z.length; i++) {
                                for (int j = 0; j < z.length; j++) {
                                    resul.append("\t" + result.getL()[i][j]);

                                }
                                resul.append("\n");

                            }
                            resul.append("\n\n");
                            resul.append("Matriz U\n");
                            for (int i = 0; i < z.length; i++) {
                                for (int j = 0; j < z.length; j++) {
                                    resul.append("\t" + result.getU()[i][j]);

                                }
                                resul.append("\n");

                            }
                            //System.out.println("Y: " +Arrays.toString(z));
                            resul.append("\n-------------------------------------------------------------------\n");
                            resul.append("Vector y resultante de Ly=b");
                            resul.append("\n");
                            for (int i = 0; i < z.length; i++) {
                                resul.append("\ny" + (i + 1) + ") = " + z[i]);

                            }
                            //System.out.println("\n Sustitución Regresiva Ux = z");
                            double[] x = method.SustitucionRegresiva(result.getU(), z);
                            resul.append("\n-------------------------------------------------------------------\n");
                            resul.append("Vector y resultante de Ux=y");
                            resul.append("\n");

                            for (int i = 0; i < x.length; ++i) {
                                resul.append("\nx" + (i + 1) + " = " + x[i]);
                            }
                        } else {
                            resul.append("\n");
                            resul.append("\n*****************************************************************");
                            resul.append("\n            La matriz es no definida positiva");
                            resul.append("\n*****************************************************************");

                        }
                    } else {
                        resul.append("\n");
                        resul.append("\n*****************************************************************");
                        resul.append("\n            La matriz no es simetrica");
                        resul.append("\n*****************************************************************");

                    }
                } else {
                    resul.append("\n");
                    resul.append("\n*****************************************************************");
                    resul.append("\n            La matriz no es cuadrada");
                    resul.append("\n*****************************************************************");

                }
                break;

            case 1:
                SistemasdeEcuaciones meth = new SistemasdeEcuaciones();

                EliminacionGaussiana m3 = new EliminacionGaussiana();

                double[] y = new double[f1];
                double[] x = new double[f1];

                result = meth.factorizacionLU(matriz1);
                
                if(result!=null){
                resul.append("Matriz L\n");
                for (int i = 0; i < f1; i++) {
                    for (int j = 0; j < f1; j++) {
                        resul.append("\t" + result.getL()[i][j]);

                    }
                    resul.append("\n");

                }
                resul.append("\n\n");
                resul.append("Matriz U\n");
                for (int i = 0; i < f1; i++) {
                    for (int j = 0; j < f1; j++) {
                        resul.append("\t" + result.getU()[i][j]);

                    }
                    resul.append("\n");

                }
                y = m3.gaussSinPivote(result.getL(), matriz2);
                x = m3.gaussSinPivote(result.getU(), y);
                resul.append("\n-------------------------------------------------------------------\n");
                resul.append("Vector y resultante de Ly=b");
                resul.append("\n");
                for (int i = 0; i < f1; i++) {
                    resul.append("\ny" + (i + 1) + ") = " + y[i]);

                }
                //System.out.println("\n Sustitución Regresiva Ux = z");

                resul.append("\n-------------------------------------------------------------------\n");
                resul.append("Vector y resultante de Ux=y");
                resul.append("\n");

                for (int i = 0; i < x.length; i++) {
                    resul.append("x" + (i + 1) + "=" + x[i]+"\n");
                }
                break;
                }else{
                     resul.append("\n");
                    resul.append("\n*****************************************************************");
                    resul.append("\n           La matriz no se puede factorar en la forma LU");
                    resul.append("\n*****************************************************************");
                }

        }

    }//GEN-LAST:event_execActionPerformed

    private void LimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarActionPerformed
        resul.setText("");
        dim.setText("");
        matA.setText("");
        matB.setText("");
    }//GEN-LAST:event_LimpiarActionPerformed

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Limpiar;
    private javax.swing.JTextField dim;
    private javax.swing.JButton exec;
    private javax.swing.JComboBox<String> item;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea matA;
    private javax.swing.JTextArea matB;
    private javax.swing.JTextArea resul;
    // End of variables declaration//GEN-END:variables
}
